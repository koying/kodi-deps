From 3a3802cddd331446b5b698042da59dc186fc815b Mon Sep 17 00:00:00 2001
From: "Chris \"Koying\" Browet" <cbro@semperpax.com>
Date: Sat, 18 Nov 2017 18:52:41 +0100
Subject: [PATCH 2/2] [UWP]: fixes

---
 CMakeLists.txt                  |  9 ++++++++-
 configure.cmake                 |  4 ++++
 include/mysql.h                 |  2 --
 libmysql/CMakeLists.txt         |  2 +-
 libmysql/get_password.c         |  7 ++++++-
 libmysql/libmysql.c             | 11 ++++++++++-
 mysys/CMakeLists.txt            | 18 +++++++++++++++---
 mysys/charset.c                 |  4 ++++
 mysys/mf_path.c                 | 15 ++++++++++++---
 mysys/my_access.c               |  4 ++++
 mysys/my_chsize.c               |  2 +-
 mysys/my_create.c               |  2 +-
 mysys/my_delete.c               |  2 +-
 mysys/my_fopen.c                | 14 +++++++-------
 mysys/my_fstream.c              |  2 +-
 mysys/my_gethwaddr.c            |  2 ++
 mysys/my_getwd.c                |  4 ++--
 mysys/my_init.c                 | 11 +++++++++++
 mysys/my_lib.c                  |  4 ++--
 mysys/my_open.c                 |  4 ++--
 mysys/my_pread.c                |  4 ++--
 mysys/my_rdtsc.c                |  2 ++
 mysys/my_read.c                 |  2 +-
 mysys/my_seek.c                 |  2 +-
 mysys/my_thread.c               |  4 ++++
 mysys/my_write.c                |  2 +-
 mysys_ssl/mf_tempdir.cc         |  2 ++
 mysys_ssl/my_default.cc         | 24 +++++++++++++++++++++++-
 sql-common/client.c             | 16 ++++++++++------
 sql-common/client_plugin.c      |  9 ++++++++-
 testclients/mysql_client_test.c |  9 ++++++++-
 vio/viopipe.c                   |  8 ++++++++
 32 files changed, 164 insertions(+), 43 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1898265..a1ee4cd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -177,6 +177,11 @@ IF(CMAKE_SYSTEM_NAME MATCHES "SunOS")
   ENDIF()
 ENDIF()
 
+IF(CMAKE_SYSTEM_NAME MATCHES "WindowsStore")
+  SET(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} /sdl-")
+  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /sdl-")
+ENDIF()
+
 INCLUDE(CheckTypeSize)
 CHECK_TYPE_SIZE("void *" SIZEOF_VOIDP)
 MESSAGE(STATUS "SIZEOF_VOIDP ${SIZEOF_VOIDP}")
@@ -520,7 +525,9 @@ IF(0) #WITH_UNIT_TESTS)
 ENDIF()
 
 SET(WITH_INNOBASE_STORAGE_ENGINE 0)
-ADD_SUBDIRECTORY(extra)
+if (NOT CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
+  ADD_SUBDIRECTORY(extra)
+ENDIF()
 ADD_SUBDIRECTORY(scripts)
 # ADD_SUBDIRECTORY(testclients)
 ADD_SUBDIRECTORY(support-files)
diff --git a/configure.cmake b/configure.cmake
index fdcc4be..f821f02 100644
--- a/configure.cmake
+++ b/configure.cmake
@@ -95,6 +95,9 @@ IF(CMAKE_SYSTEM_NAME MATCHES "SunOS")
   ENDIF()
 ENDIF()
 
+if (CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
+  SET(HAVE_LLVM_LIBCPP 0)
+ELSE()
 # Check to see if we are using LLVM's libc++ rather than e.g. libstd++
 # Can then check HAVE_LLBM_LIBCPP later without including e.g. ciso646.
 CHECK_CXX_SOURCE_RUNS("
@@ -107,6 +110,7 @@ int main()
   return 1;
 #endif
 }" HAVE_LLVM_LIBCPP)
+ENDIF()
 
 MACRO(DIRNAME IN OUT)
   GET_FILENAME_COMPONENT(${OUT} ${IN} PATH)
diff --git a/include/mysql.h b/include/mysql.h
index a3e5928..96ebfcb 100644
--- a/include/mysql.h
+++ b/include/mysql.h
@@ -44,9 +44,7 @@ typedef char my_bool;
 #ifndef my_socket_defined
 #ifdef _WIN32
 #include <windows.h>
-#ifdef WIN32_LEAN_AND_MEAN
 #include <winsock2.h>
-#endif
 #define my_socket SOCKET
 #else
 typedef int my_socket;
diff --git a/libmysql/CMakeLists.txt b/libmysql/CMakeLists.txt
index fb7bc54..8f36978 100644
--- a/libmysql/CMakeLists.txt
+++ b/libmysql/CMakeLists.txt
@@ -224,7 +224,7 @@ SET(LIBS clientlib dbug strings vio mysys mysys_ssl ${ZLIB_LIBRARY} ${SSL_LIBRAR
 # On Windows platform client library includes the client-side 
 # Windows Native Authentication plugin.
 #
-IF(WIN32)
+IF(WIN32 AND NOT CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
   ADD_DEFINITIONS(-DAUTHENTICATION_WIN)
   ADD_SUBDIRECTORY(authentication_win)
   LIST(APPEND LIBS auth_win_client)
diff --git a/libmysql/get_password.c b/libmysql/get_password.c
index d904fbe..edb3b80 100644
--- a/libmysql/get_password.c
+++ b/libmysql/get_password.c
@@ -56,7 +56,12 @@
 #define getpass(A) getpassphrase(A)
 #endif
 
-#if defined(_WIN32)
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+char *get_tty_password(const char *opt_message)
+{
+  return NULL;
+}
+#elif defined(_WIN32)
 /* were just going to fake it here and get input from the keyboard */
 char *get_tty_password(const char *opt_message)
 {
diff --git a/libmysql/libmysql.c b/libmysql/libmysql.c
index 659ed2d..be80bcc 100644
--- a/libmysql/libmysql.c
+++ b/libmysql/libmysql.c
@@ -141,8 +141,11 @@ int STDCALL mysql_server_init(int argc MY_ATTRIBUTE((unused)),
       if ((serv_ptr= getservbyname("mysql", "tcp")))
         mysql_port= (uint) ntohs((ushort) serv_ptr->s_port);
 #endif
+
+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
       if ((env= getenv("MYSQL_TCP_PORT")))
         mysql_port=(uint) atoi(env);
+#endif
     }
 
     if (!mysql_unix_port)
@@ -153,8 +156,10 @@ int STDCALL mysql_server_init(int argc MY_ATTRIBUTE((unused)),
 #else
       mysql_unix_port = (char*) MYSQL_UNIX_ADDR;
 #endif
+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
       if ((env = getenv("MYSQL_UNIX_PORT")))
 	mysql_unix_port = env;
+#endif
     }
     mysql_debug(NullS);
 #if defined(SIGPIPE) && !defined(_WIN32)
@@ -259,10 +264,11 @@ mysql_debug(const char *debug MY_ATTRIBUTE((unused)))
   {
     DBUG_PUSH(debug);
   }
+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   else if ((env = getenv("MYSQL_DEBUG")))
   {
     DBUG_PUSH(env);
-#if !defined(_WINVER) && !defined(WINVER)
+#if (!defined(_WINVER) && !defined(WINVER))
     puts("\n-------------------------------------------------------");
     puts("MYSQL_DEBUG found. libmysql started with the following:");
     puts(env);
@@ -277,6 +283,7 @@ mysql_debug(const char *debug MY_ATTRIBUTE((unused)))
 #endif
   }
 #endif
+#endif
 }
 
 
@@ -389,8 +396,10 @@ void read_user_name(char *name)
 
 void read_user_name(char *name)
 {
+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   char *str=getenv("USER");		/* ODBC will send user variable */
   strmake(name,str ? str : "ODBC", USERNAME_LENGTH);
+#endif
 }
 
 #endif
diff --git a/mysys/CMakeLists.txt b/mysys/CMakeLists.txt
index 9615263..247f1e3 100644
--- a/mysys/CMakeLists.txt
+++ b/mysys/CMakeLists.txt
@@ -29,18 +29,30 @@ SET(MYSYS_SOURCES  array.c charset-def.c charset.c checksum.c
 				my_mkdir.c my_mmap.c my_once.c my_open.c my_pread.c
 				my_read.c my_redel.c my_rename.c my_seek.c
 				my_static.c my_symlink.c my_symlink2.c my_sync.c my_thr_init.c
-				my_write.c ptr_cmp.c queues.c sql_chars.c stacktrace.c
+				my_write.c ptr_cmp.c queues.c sql_chars.c 
 				string.c thr_cond.c thr_lock.c thr_mutex.c
 				thr_rwlock.c tree.c typelib.c base64.c my_memmem.c
 				lf_alloc-pin.c lf_dynarray.c lf_hash.c
-				my_rdtsc.c psi_noop.c my_syslog.c
+				my_rdtsc.c psi_noop.c 
 				my_chmod.c my_thread.c)
 
+IF (NOT CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
+  LIST(APPEND MYSYS_SOURCES
+    stacktrace.c
+    my_syslog.c
+  )
+ENDIF()
+
 IF (WIN32)
   LIST(APPEND MYSYS_SOURCES
+    my_winerr.c
+  )
+ENDIF()
+
+IF (WIN32 AND NOT CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
+  LIST(APPEND MYSYS_SOURCES
     my_conio.c
     my_windac.c
-    my_winerr.c
     my_winfile.c
     win_timers.c
   )
diff --git a/mysys/charset.c b/mysys/charset.c
index 0ac55fc..83ed119 100644
--- a/mysys/charset.c
+++ b/mysys/charset.c
@@ -868,6 +868,7 @@ CHARSET_INFO *fs_character_set()
 {
   if (!fs_cset_cache)
   {
+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
     char buf[10]= "cp";
     GetLocaleInfo(LOCALE_SYSTEM_DEFAULT, LOCALE_IDEFAULTANSICODEPAGE,
                   buf+2, sizeof(buf)-3);
@@ -884,6 +885,9 @@ CHARSET_INFO *fs_character_set()
                         !strcmp(buf, "cp932") ? &my_charset_cp932_japanese_ci : 
                 #endif
                         &my_charset_bin;
+#else
+    fs_cset_cache = &my_charset_bin;
+#endif
   }
   return fs_cset_cache;
 }
diff --git a/mysys/mf_path.c b/mysys/mf_path.c
index d3de3b2..cb2f3c0 100644
--- a/mysys/mf_path.c
+++ b/mysys/mf_path.c
@@ -39,9 +39,12 @@ char * my_path(char * to, const char *progname,
 
   start=to;					/* Return this */
   if (progname && (dirname_part(to, progname, &to_length) ||
-		   find_file_in_path(to,progname) ||
-		   ((prog=getenv("_")) != 0 &&
-                    dirname_part(to, prog, &to_length))))
+		   find_file_in_path(to,progname)
+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+		   || ((prog=getenv("_")) != 0 &&
+                    dirname_part(to, prog, &to_length))
+#endif
+         ))
   {
     (void) intern_filename(to,to);
     if (!test_if_hard_path(to))
@@ -52,8 +55,10 @@ char * my_path(char * to, const char *progname,
   }
   else
   {
+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
     if ((end = getenv("MY_BASEDIR_VERSION")) == 0 &&
 	(end = getenv("MY_BASEDIR")) == 0)
+#endif
     {
 #ifdef DEFAULT_BASEDIR
       end= (char*) DEFAULT_BASEDIR;
@@ -88,6 +93,9 @@ static char *find_file_in_path(char *to, const char *name)
   char *path,*pos,dir[2];
   const char *ext="";
 
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+  return NullS;
+#else
   if (!(path=getenv("PATH")))
     return NullS;
   dir[0]=FN_LIBCHAR; dir[1]=0;
@@ -118,4 +126,5 @@ static char *find_file_in_path(char *to, const char *name)
   }
 #endif
   return NullS;				/* File not found */
+#endif
 }
diff --git a/mysys/my_access.c b/mysys/my_access.c
index 0d66643..278bf9b 100644
--- a/mysys/my_access.c
+++ b/mysys/my_access.c
@@ -170,11 +170,15 @@ int check_if_legal_tablename(const char *name)
 */
 static my_bool does_drive_exists(char drive_letter)
 {
+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   DWORD drive_mask= GetLogicalDrives();
   drive_letter= toupper(drive_letter);
 
   return (drive_letter >= 'A' && drive_letter <= 'Z') &&
          (drive_mask & (0x1 << (drive_letter - 'A')));
+#else
+  return FALSE;
+#endif
 }
 
 /**
diff --git a/mysys/my_chsize.c b/mysys/my_chsize.c
index ca388dc..c150ec3 100644
--- a/mysys/my_chsize.c
+++ b/mysys/my_chsize.c
@@ -54,7 +54,7 @@ int my_chsize(File fd, my_off_t newlength, int filler, myf MyFlags)
 
   if (oldsize > newlength)
   {
-#ifdef _WIN32
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
     if (my_win_chsize(fd, newlength))
     {
       set_my_errno(errno);
diff --git a/mysys/my_create.c b/mysys/my_create.c
index a140eb7..392eb0f 100644
--- a/mysys/my_create.c
+++ b/mysys/my_create.c
@@ -40,7 +40,7 @@ File my_create(const char *FileName, int CreateFlags, int access_flags,
   DBUG_ENTER("my_create");
   DBUG_PRINT("my",("Name: '%s' CreateFlags: %d  AccessFlags: %d  MyFlags: %d",
 		   FileName, CreateFlags, access_flags, MyFlags));
-#if defined(_WIN32)
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   fd= my_win_open(FileName, access_flags | O_CREAT);
 #else
   fd= open((char *) FileName, access_flags | O_CREAT,
diff --git a/mysys/my_delete.c b/mysys/my_delete.c
index 7f82e60..556244e 100644
--- a/mysys/my_delete.c
+++ b/mysys/my_delete.c
@@ -41,7 +41,7 @@ int my_delete(const char *name, myf MyFlags)
   DBUG_RETURN(err);
 } /* my_delete */
 
-#if defined(_WIN32)
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
 /**
   Delete file which is possibly not closed.
 
diff --git a/mysys/my_fopen.c b/mysys/my_fopen.c
index 681c3b5..7dd0b04 100644
--- a/mysys/my_fopen.c
+++ b/mysys/my_fopen.c
@@ -47,7 +47,7 @@ FILE *my_fopen(const char *filename, int flags, myf MyFlags)
 
   make_ftype(type,flags);
 
-#ifdef _WIN32
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   fd= my_win_fopen(filename, type);
 #else
   fd= fopen(filename, type);
@@ -98,7 +98,7 @@ FILE *my_fopen(const char *filename, int flags, myf MyFlags)
 } /* my_fopen */
 
 
-#if defined(_WIN32)
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
 
 static FILE *my_win_freopen(const char *path, const char *mode, FILE *stream)
 {
@@ -165,7 +165,7 @@ FILE *my_freopen(const char *path, const char *mode, FILE *stream)
 {
   FILE *result;
 
-#if defined(_WIN32)
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   result= my_win_freopen(path, mode, stream);
 #else
   result= freopen(path, mode, stream);
@@ -184,10 +184,10 @@ int my_fclose(FILE *fd, myf MyFlags)
 
   mysql_mutex_lock(&THR_LOCK_open);
   file= my_fileno(fd);
-#ifndef _WIN32
-  err= fclose(fd);
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+  err = my_win_fclose(fd);
 #else
-  err= my_win_fclose(fd);
+  err = fclose(fd);
 #endif
   if(err < 0)
   {
@@ -223,7 +223,7 @@ FILE *my_fdopen(File Filedes, const char *name, int Flags, myf MyFlags)
 		   Filedes, Flags, MyFlags));
 
   make_ftype(type,Flags);
-#ifdef _WIN32
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   fd= my_win_fdopen(Filedes, type);
 #else
   fd= fdopen(Filedes, type);
diff --git a/mysys/my_fstream.c b/mysys/my_fstream.c
index 83d1ebb..2a42db7 100644
--- a/mysys/my_fstream.c
+++ b/mysys/my_fstream.c
@@ -178,7 +178,7 @@ my_off_t my_ftell(FILE *stream, myf MyFlags MY_ATTRIBUTE((unused)))
 /* Get a File corresponding to the stream*/
 int my_fileno(FILE *f)
 {
-#ifdef _WIN32
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   return my_win_fileno(f);
 #else
  return fileno(f);
diff --git a/mysys/my_gethwaddr.c b/mysys/my_gethwaddr.c
index 5b48e5b..b1ce421 100644
--- a/mysys/my_gethwaddr.c
+++ b/mysys/my_gethwaddr.c
@@ -172,6 +172,7 @@ my_bool my_gethwaddr(uchar *to)
   static pfnGetAdaptersAddresses fnGetAdaptersAddresses=
                                 (pfnGetAdaptersAddresses)-1;
 
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
   if(fnGetAdaptersAddresses == (pfnGetAdaptersAddresses)-1)
   {
     /* Get the function from the DLL */
@@ -224,6 +225,7 @@ my_bool my_gethwaddr(uchar *to)
   /* Clean up memory allocation. */
   if (pAdapterAddresses != &adapterAddresses)
     my_free(pAdapterAddresses);
+#endif
 
   return return_val;
 }
diff --git a/mysys/my_getwd.c b/mysys/my_getwd.c
index 6d650a8..2172829 100644
--- a/mysys/my_getwd.c
+++ b/mysys/my_getwd.c
@@ -58,7 +58,7 @@ int my_getwd(char * buf, size_t size, myf MyFlags)
   {
     if (size < 2)
       DBUG_RETURN(-1);
-    if (!getcwd(buf,(uint) (size-2)) && MyFlags & MY_WME)
+    if (!_getcwd(buf,(uint) (size-2)) && MyFlags & MY_WME)
     {
       char errbuf[MYSYS_STRERROR_SIZE];
       set_my_errno(errno);
@@ -90,7 +90,7 @@ int my_setwd(const char *dir, myf MyFlags)
   start=(char *) dir;
   if (! dir[0] || (dir[0] == FN_LIBCHAR && dir[1] == 0))
     dir=FN_ROOTDIR;
-  if ((res=chdir((char*) dir)) != 0)
+  if ((res=_chdir((char*) dir)) != 0)
   {
     set_my_errno(errno);
     if (MyFlags & MY_WME)
diff --git a/mysys/my_init.c b/mysys/my_init.c
index 54d44e6..9e3801f 100644
--- a/mysys/my_init.c
+++ b/mysys/my_init.c
@@ -27,6 +27,7 @@
 
 #ifdef _WIN32
 #include <locale.h>
+#include <time.h>
 #include <crtdbg.h>
 /* WSAStartup needs winsock library*/
 #pragma comment(lib, "ws2_32")
@@ -100,12 +101,14 @@ my_bool my_init()
   my_umask= 0640;                       /* Default umask for new files */
   my_umask_dir= 0750;                   /* Default umask for new directories */
 
+#if (WINAPI_FAMILY != WINAPI_FAMILY_APP)
   /* Default creation of new files */
   if ((str= getenv("UMASK")) != 0)
     my_umask= (int) (atoi_octal(str) | 0640);
   /* Default creation of new dir's */
   if ((str= getenv("UMASK_DIR")) != 0)
     my_umask_dir= (int) (atoi_octal(str) | 0750);
+#endif
 
   instrumented_stdin.m_file= stdin;
   instrumented_stdin.m_psi= NULL;       /* not yet instrumented */
@@ -117,9 +120,11 @@ my_bool my_init()
   if (my_thread_init())
     return TRUE;
 
+#if (WINAPI_FAMILY != WINAPI_FAMILY_APP)
   /* $HOME is needed early to parse configuration files located in ~/ */
   if ((home_dir= getenv("HOME")) != 0)
     home_dir= intern_filename(home_dir_buff, home_dir);
+#endif
 
   {
     DBUG_ENTER("my_init");
@@ -299,6 +304,7 @@ static void win_init_time()
 */
 static void win_init_registry()
 {
+#if (WINAPI_FAMILY != WINAPI_FAMILY_APP)
   HKEY key_handle;
 
   if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, (LPCTSTR)"SOFTWARE\\MySQL",
@@ -345,6 +351,7 @@ static void win_init_registry()
 
     RegCloseKey(key_handle);
   }
+#endif
 }
 
 
@@ -361,6 +368,7 @@ static void win_init_registry()
 
 static my_bool win32_have_tcpip()
 {
+#if (WINAPI_FAMILY != WINAPI_FAMILY_APP)
   HKEY hTcpipRegKey;
   if (RegOpenKeyEx ( HKEY_LOCAL_MACHINE, TCPIPKEY, 0, KEY_READ,
 		      &hTcpipRegKey) != ERROR_SUCCESS)
@@ -375,6 +383,7 @@ static my_bool win32_have_tcpip()
     }
   }
   RegCloseKey ( hTcpipRegKey);
+#endif
   return (TRUE);
 }
 
@@ -427,7 +436,9 @@ static void my_win_init()
   _RTC_SetErrorFunc(handle_rtc_failure);
 #endif
 
+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   _tzset();
+#endif
 
   win_init_time();
   win_init_registry();
diff --git a/mysys/my_lib.c b/mysys/my_lib.c
index 9764794..0b32b3f 100644
--- a/mysys/my_lib.c
+++ b/mysys/my_lib.c
@@ -354,7 +354,7 @@ int my_fstat(File Filedes, MY_STAT *stat_area,
 {
   DBUG_ENTER("my_fstat");
   DBUG_PRINT("my",("fd: %d  MyFlags: %d", Filedes, MyFlags));
-#ifdef _WIN32
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   DBUG_RETURN(my_win_fstat(Filedes, stat_area));
 #else
   DBUG_RETURN(fstat(Filedes, (struct stat *) stat_area));
@@ -373,7 +373,7 @@ MY_STAT *my_stat(const char *path, MY_STAT *stat_area, myf my_flags)
     if (!(stat_area= (MY_STAT *) my_malloc(key_memory_MY_STAT,
                                            sizeof(MY_STAT), my_flags)))
       goto error;
-#ifndef _WIN32
+#if !defined(_WIN32) || WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
     if (! stat((char *) path, (struct stat *) stat_area) )
       DBUG_RETURN(stat_area);
 #else
diff --git a/mysys/my_open.c b/mysys/my_open.c
index b67ac6f..c54ee20 100644
--- a/mysys/my_open.c
+++ b/mysys/my_open.c
@@ -43,7 +43,7 @@ File my_open(const char *FileName, int Flags, myf MyFlags)
   DBUG_ENTER("my_open");
   DBUG_PRINT("my",("Name: '%s'  Flags: %d  MyFlags: %d",
 		   FileName, Flags, MyFlags));
-#if defined(_WIN32)
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   fd= my_win_open(FileName, Flags);
 #else
   fd = open(FileName, Flags, my_umask);	/* Normal unix */
@@ -71,7 +71,7 @@ int my_close(File fd, myf MyFlags)
   DBUG_PRINT("my",("fd: %d  MyFlags: %d",fd, MyFlags));
 
   mysql_mutex_lock(&THR_LOCK_open);
-#ifndef _WIN32
+#if !defined(_WIN32) || WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   do
   {
     err= close(fd);
diff --git a/mysys/my_pread.c b/mysys/my_pread.c
index 1511fd7..5c7c3a8 100644
--- a/mysys/my_pread.c
+++ b/mysys/my_pread.c
@@ -54,7 +54,7 @@ size_t my_pread(File Filedes, uchar *Buffer, size_t Count, my_off_t offset,
   for (;;)
   {
     errno= 0;    /* Linux, Windows don't reset this on EOF/success */
-#if defined(_WIN32)
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
     readbytes= my_win_pread(Filedes, Buffer, Count, offset);
 #else
     readbytes= pread(Filedes, Buffer, Count, offset);
@@ -143,7 +143,7 @@ size_t my_pwrite(File Filedes, const uchar *Buffer, size_t Count,
   for (;;)
   {
     errno= 0;
-#if defined (_WIN32)
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
     writtenbytes= my_win_pwrite(Filedes, Buffer, Count, offset);
 #else
     writtenbytes= pwrite(Filedes, Buffer, Count, offset);
diff --git a/mysys/my_rdtsc.c b/mysys/my_rdtsc.c
index 2be781f..a7deca9 100644
--- a/mysys/my_rdtsc.c
+++ b/mysys/my_rdtsc.c
@@ -314,6 +314,8 @@ ulonglong my_timer_ticks(void)
     struct tms times_buf;
     return (ulonglong) times(&times_buf);
   }
+#elif WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+  return GetTickCount64();
 #elif defined(_WIN32)
   return (ulonglong) GetTickCount();
 #else
diff --git a/mysys/my_read.c b/mysys/my_read.c
index c80ad1c..cc63055 100644
--- a/mysys/my_read.c
+++ b/mysys/my_read.c
@@ -46,7 +46,7 @@ size_t my_read(File Filedes, uchar *Buffer, size_t Count, myf MyFlags)
   for (;;)
   {
     errno= 0;					/* Linux, Windows don't reset this on EOF/success */
-#ifdef _WIN32
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
     readbytes= my_win_read(Filedes, Buffer, Count);
 #else
     readbytes= read(Filedes, Buffer, Count);
diff --git a/mysys/my_seek.c b/mysys/my_seek.c
index 3a73e06..4621c8a 100644
--- a/mysys/my_seek.c
+++ b/mysys/my_seek.c
@@ -56,7 +56,7 @@ my_off_t my_seek(File fd, my_off_t pos, int whence, myf MyFlags)
       Make sure we are using a valid file descriptor!
   */
   DBUG_ASSERT(fd != -1);
-#if defined (_WIN32)
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   newpos= my_win_lseek(fd, pos, whence);
 #else
   newpos= lseek(fd, pos, whence);
diff --git a/mysys/my_thread.c b/mysys/my_thread.c
index 5db580e..cdca932 100644
--- a/mysys/my_thread.c
+++ b/mysys/my_thread.c
@@ -163,7 +163,11 @@ int my_thread_cancel(my_thread_handle *thread)
 
   if (thread->handle)
   {
+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      ok= TerminateThread(thread->handle, 0);
+#else
+    ok = TRUE;
+#endif
      CloseHandle(thread->handle);
   }
   if (ok)
diff --git a/mysys/my_write.c b/mysys/my_write.c
index d849949..7b47ea4 100644
--- a/mysys/my_write.c
+++ b/mysys/my_write.c
@@ -57,7 +57,7 @@ size_t my_write(File Filedes, const uchar *Buffer, size_t Count, myf MyFlags)
   for (;;)
   {
     errno= 0;
-#ifdef _WIN32
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
     writtenbytes= my_win_write(Filedes, Buffer, Count);
 #else
     writtenbytes= write(Filedes, Buffer, Count);
diff --git a/mysys_ssl/mf_tempdir.cc b/mysys_ssl/mf_tempdir.cc
index 2935509..735713c 100644
--- a/mysys_ssl/mf_tempdir.cc
+++ b/mysys_ssl/mf_tempdir.cc
@@ -36,6 +36,7 @@ my_bool init_tmpdir(MY_TMPDIR *tmpdir, const char *pathlist)
   memset(tmpdir, 0, sizeof(*tmpdir));
   if (!pathlist || !pathlist[0])
   {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     /* Get default temporary directory */
     pathlist=getenv("TMPDIR");	/* Use this if possible */
 #if defined(_WIN32)
@@ -44,6 +45,7 @@ my_bool init_tmpdir(MY_TMPDIR *tmpdir, const char *pathlist)
     if (!pathlist)
       pathlist=getenv("TMP");
 #endif
+#endif
     if (!pathlist || !pathlist[0])
       pathlist= DEFAULT_TMPDIR;
   }
diff --git a/mysys_ssl/my_default.cc b/mysys_ssl/my_default.cc
index d329fc9..463f5e4 100644
--- a/mysys_ssl/my_default.cc
+++ b/mysys_ssl/my_default.cc
@@ -273,8 +273,10 @@ int my_search_option_files(const char *conf_file, int *argc, char ***argv,
                                       (char **) &my_defaults_group_suffix,
                                       (char **) &my_login_path, found_no_defaults);
 
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     if (! my_defaults_group_suffix)
       my_defaults_group_suffix= getenv(STRINGIFY_ARG(DEFAULT_GROUP_SUFFIX_ENV));
+#endif
 
     if (forced_extra_defaults && !defaults_already_read)
     {
@@ -1326,7 +1328,8 @@ typedef UINT (WINAPI *GET_SYSTEM_WINDOWS_DIRECTORY)(LPSTR, UINT);
 
 static size_t my_get_system_windows_directory(char *buffer, size_t size)
 {
-  size_t count;
+  size_t count = 0;
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
   GET_SYSTEM_WINDOWS_DIRECTORY
     func_ptr= (GET_SYSTEM_WINDOWS_DIRECTORY)
               GetProcAddress(GetModuleHandle("kernel32.dll"),
@@ -1346,6 +1349,7 @@ static size_t my_get_system_windows_directory(char *buffer, size_t size)
     count-= 8;
     buffer[count] = '\0';
   }
+#endif
   return count;
 }
 
@@ -1354,7 +1358,9 @@ static const char *my_get_module_parent(char *buf, size_t size)
 {
   char *last= NULL;
   char *end;
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
   if (!GetModuleFileName(NULL, buf, (DWORD) size))
+#endif
     return NULL;
   end= strend(buf);
 
@@ -1393,6 +1399,17 @@ static const char **init_default_directories(MEM_ROOT *alloc)
     return NULL;
   memset(dirs, 0, DEFAULT_DIRS_SIZE * sizeof(char *));
 
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+
+#if defined(DEFAULT_SYSCONFDIR)
+  if (DEFAULT_SYSCONFDIR[0])
+    errors += add_directory(alloc, DEFAULT_SYSCONFDIR, dirs);
+#endif /* DEFAULT_SYSCONFDIR */
+
+  /* Placeholder for --defaults-extra-file=<path> */
+  errors += add_directory(alloc, "", dirs);
+
+#else
 #ifdef _WIN32
 
   {
@@ -1430,6 +1447,7 @@ static const char **init_default_directories(MEM_ROOT *alloc)
 #if !defined(_WIN32)
   errors += add_directory(alloc, "~/", dirs);
 #endif
+#endif
 
   return (errors > 0 ? NULL : dirs);
 }
@@ -1446,6 +1464,9 @@ static const char **init_default_directories(MEM_ROOT *alloc)
 
 int my_default_get_login_file(char *file_name, size_t file_name_size)
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+  return 0;
+#else
   size_t rc;
 
   if (getenv("MYSQL_TEST_LOGIN_FILE"))
@@ -1470,6 +1491,7 @@ int my_default_get_login_file(char *file_name, size_t file_name_size)
     return 0;
 
   return 1;
+#endif
 }
 
 /**
diff --git a/sql-common/client.c b/sql-common/client.c
index 9e88e9f..4fd3b51 100644
--- a/sql-common/client.c
+++ b/sql-common/client.c
@@ -353,7 +353,7 @@ void set_mysql_extended_error(MYSQL *mysql, int errcode,
   Create a named pipe connection
 */
 
-#ifdef _WIN32
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
 
 static HANDLE create_named_pipe(MYSQL *mysql, DWORD connect_timeout,
                                 const char **arg_host,
@@ -1520,8 +1520,12 @@ static void cli_flush_use_result(MYSQL *mysql, my_bool flush_all_results)
   DBUG_VOID_RETURN;
 }
 
-
-#ifdef _WIN32
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+static my_bool is_NT(void)
+{
+  return 0;
+}
+#elif defined(_WIN32)
 static my_bool is_NT(void)
 {
   char *os=getenv("OS");
@@ -3040,7 +3044,7 @@ mysql_autodetect_character_set(MYSQL *mysql)
 {
   const char *csname= MYSQL_DEFAULT_CHARSET_NAME;
 
-#ifdef _WIN32
+#if defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   char cpbuf[64];
   {
     my_snprintf(cpbuf, sizeof(cpbuf), "cp%d", (int) GetConsoleCP());
@@ -4226,7 +4230,7 @@ CLI_MYSQL_REAL_CONNECT(MYSQL *mysql,const char *host, const char *user,
   if (!passwd)
   {
     passwd=mysql->options.password;
-#if !defined(MYSQL_SERVER)
+#if !defined(MYSQL_SERVER) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
     if (!passwd)
       passwd=getenv("MYSQL_PWD");		/* get it from environment */
 #endif
@@ -4341,7 +4345,7 @@ CLI_MYSQL_REAL_CONNECT(MYSQL *mysql,const char *host, const char *user,
     }
     mysql->options.protocol=MYSQL_PROTOCOL_SOCKET;
   }
-#elif defined(_WIN32)
+#elif defined(_WIN32) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   if (!net->vio &&
       (mysql->options.protocol == MYSQL_PROTOCOL_PIPE ||
        (host && !strcmp(host,LOCAL_HOST_NAMEDPIPE)) ||
diff --git a/sql-common/client_plugin.c b/sql-common/client_plugin.c
index c7dfda9..f0f3d7c 100644
--- a/sql-common/client_plugin.c
+++ b/sql-common/client_plugin.c
@@ -288,6 +288,9 @@ add_plugin_withargs(MYSQL *mysql, struct st_mysql_client_plugin *plugin,
 */
 static void load_env_plugins(MYSQL *mysql)
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+  return;
+#else
   char *plugs, *free_env, *s= getenv("LIBMYSQL_PLUGINS");
   char *enable_cleartext_plugin= getenv("LIBMYSQL_ENABLE_CLEARTEXT_PLUGIN");
 
@@ -309,7 +312,7 @@ static void load_env_plugins(MYSQL *mysql)
   } while (s);
 
   my_free(free_env);
-
+#endif
 }
 
 
@@ -420,6 +423,9 @@ struct st_mysql_client_plugin *
 mysql_load_plugin_v(MYSQL *mysql, const char *name, int type,
                     int argc, va_list args)
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+  return NULL;
+#else
   const char *errmsg;
   char dlpath[FN_REFLEN+1];
   void *sym, *dlhandle;
@@ -534,6 +540,7 @@ err:
   set_mysql_extended_error(mysql, CR_AUTH_PLUGIN_CANNOT_LOAD, unknown_sqlstate,
                            ER(CR_AUTH_PLUGIN_CANNOT_LOAD), name, errmsg);
   DBUG_RETURN (NULL);
+#endif
 }
 
 /* see <mysql/client_plugin.h> for a full description */
diff --git a/testclients/mysql_client_test.c b/testclients/mysql_client_test.c
index 1528a5e..3343a6e 100644
--- a/testclients/mysql_client_test.c
+++ b/testclients/mysql_client_test.c
@@ -427,7 +427,10 @@ FILE *mct_log_file= NULL;
 
 void mct_start_logging(const char *test_case_name)
 {
-  const char *tmp_dir= getenv("MYSQL_TMP_DIR");
+  const char *tmp_dir = NULL;
+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
+  tmp_dir= getenv("MYSQL_TMP_DIR");
+#endif
 
   if (!tmp_dir)
   {
@@ -20269,7 +20272,11 @@ static void test_bug20444737()
   char       *master_test_filename;
   ulong length;
   int rc;
+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   const char *test_dir= getenv("MYSQL_TEST_DIR");
+#else
+  const char *test_dir = NULL;
+#endif
   const char db_query[]="USE client_test_db";
 
   myheader("Test_bug20444737");
diff --git a/vio/viopipe.c b/vio/viopipe.c
index c2145cc..bc1bdd2 100644
--- a/vio/viopipe.c
+++ b/vio/viopipe.c
@@ -92,15 +92,20 @@ size_t vio_write_pipe(Vio *vio, const uchar *buf, size_t count)
 
 my_bool vio_is_connected_pipe(Vio *vio)
 {
+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   if (PeekNamedPipe(vio->hPipe, NULL, 0, NULL, NULL, NULL))
     return TRUE;
   else
     return (GetLastError() != ERROR_BROKEN_PIPE);
+#else
+  return FALSE;
+#endif
 }
 
 
 int vio_shutdown_pipe(Vio *vio)
 {
+#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
   BOOL ret;
   DBUG_ENTER("vio_shutdown_pipe");
 
@@ -114,4 +119,7 @@ int vio_shutdown_pipe(Vio *vio)
   vio->mysql_socket= MYSQL_INVALID_SOCKET;
 
   DBUG_RETURN(ret);
+#else
+  return FALSE;
+#endif
 }
-- 
2.7.4

