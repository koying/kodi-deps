diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..82d4ee8
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,194 @@
+cmake_minimum_required(VERSION 3.1)
+set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
+
+project(dvdcss C)
+
+set(DVDCSS_VERSION_MAJOR 0)
+set(DVDCSS_VERSION_MINOR 19)
+set(DVDCSS_VERSION_MICRO 7)
+
+set(LIBDVDCSS_VERSION "${DVDCSS_VERSION_MAJOR}.${DVDCSS_VERSION_MINOR}.${DVDCSS_VERSION_MICRO}")
+
+include(CheckIncludeFiles)
+include(CheckSymbolExists)
+include(CheckTypeSize)
+include(CheckFileOffsetBits)
+
+check_include_files("IOKit/storage/IODVDMediaBSDClient.h" DARWIN_DVD_IOCTL)
+check_include_files("linux/cdrom.h" DVD_STRUCT_IN_LINUX_CDROM_H)
+check_include_files("linux/cdrom.h" HAVE_LINUX_CDROM_H)
+check_include_files("sys/cdio.h" DVD_STRUCT_IN_SYS_CDIO_H)
+check_include_files("sys/cdio.h" HAVE_SYS_CDIO_H)
+check_include_files("sys/dvdio.h" DVD_STRUCT_IN_SYS_DVDIO_H)
+check_include_files("sys/dvdio.h" HAVE_SYS_DVDIO_H)
+check_include_files("dlfcn.h" HAVE_DLFCN_H)
+check_include_files("dvd.h" HAVE_DVD_H)
+check_include_files("errno.h" HAVE_ERRNO_H)
+check_include_files("fcntl.h" HAVE_FCNTL_H)
+check_include_files("inttypes.h" HAVE_INTTYPES_H)
+check_include_files("io.h" HAVE_IO_H)
+check_include_files("memory.h" HAVE_MEMORY_H)
+check_include_files("pwd.h" HAVE_PWD_H)
+check_include_files("stdint.h" HAVE_STDINT_H)
+check_include_files("stdlib.h" HAVE_STDLIB_H)
+check_include_files("strings.h" HAVE_STRINGS_H)
+check_include_files("string.h" HAVE_STRING_H)
+check_include_files("sys/ioctl.h" HAVE_SYS_IOCTL_H)
+check_include_files("sys/param.h" HAVE_SYS_PARAM_H)
+check_include_files("sys/scsi/impl/uscsi.h" HAVE_SYS_SCSI_IMPL_USCSI_H)
+check_include_files("sys/scsi/scsi_types.h" HAVE_SYS_SCSI_SCSI_TYPES_H)
+check_include_files("sys/stat.h" HAVE_SYS_STAT_H)
+check_include_files("sys/types.h" HAVE_SYS_TYPES_H)
+check_include_files("sys/uio.h" HAVE_SYS_UIO_H)
+check_include_files("unistd.h" HAVE_UNISTD_H)
+check_include_files("windows.h" HAVE_WINDOWS_H)
+check_include_files("winioctl.h" HAVE_WINIOCTL_H)
+
+check_file_offset_bits()
+
+include(CheckFunctionExists)
+check_function_exists("mkdir" HAVE_MKDIR_F)
+if(NOT HAVE_MKDIR_F OR MSVC)
+  set(HAVE_BROKEN_MKDIR 1)
+endif()
+
+set(CMAKE_EXTRA_INCLUDE_FILES "sys/cdio.h")
+check_type_size(dvd_struct DVD_STRUCT)
+if(HAVE_DVD_STRUCT)
+  set(BSD_DVD_STRUCT 1)
+  set(LINUX_DVD_STRUCT 1)
+  set(OPENBSD_DVD_STRUCT 1)
+endif()
+set(HAVE_DVD_STRUCT)
+
+set(CMAKE_EXTRA_INCLUDE_FILES "sys/dvdio.h")
+check_type_size(dvd_struct DVD_STRUCT)
+if(HAVE_DVD_STRUCT)
+  set(BSD_DVD_STRUCT 1)
+  set(LINUX_DVD_STRUCT 1)
+endif()
+unset(HAVE_DVD_STRUCT)
+
+set(CMAKE_EXTRA_INCLUDE_FILES "linux/cdrom.h")
+check_type_size(dvd_struct DVD_STRUCT)
+if(HAVE_DVD_STRUCT)
+  set(LINUX_DVD_STRUCT 1)
+endif()
+unset(HAVE_DVD_STRUCT)
+
+check_type_size(size_t SIZE_T)
+if(NOT HAVE_SIZE_T)
+  if("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
+    set(size_t "uint64_t")
+  else("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
+    set(size_t   "uint32_t")
+  endif("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
+endif(NOT HAVE_SIZE_T)
+
+if(LINUX_DVD_STRUCT)
+  set(HAVE_LINUX_DVD_STRUCT 1)
+  if(OPENBSD_DVD_STRUCT)
+    set(HAVE_OPENBSD_DVD_STRUCT 1)
+  endif()
+elseif(BSD_DVD_STRUCT)
+  set(HAVE_BSD_DVD_STRUCT 1)
+endif()
+
+set(LT_OBJDIR "./libs")
+set(PACKAGE ${PROJECT_NAME})
+set(PACKAGE_NAME ${PROJECT_NAME})
+set(PACKAGE_STRING "${PROJECT_NAME} ${LIBDVDCSS_VERSION}")
+set(PACKAGE_TARNAME ${PROJECT_NAME})
+set(PACKAGE_URL "https://www.videolan.org/developers/libdvdcss.html")
+set(PACKAGE_VERSION ${LIBDVDCSS_VERSION})
+set(STDC_HEADERS 1)
+set(SUPPORT_ATTRIBUTE_VISIBILITY_DEFAULT 1)
+set(SUPPORT_FLAG_VISIBILITY 1)
+set(VERSION ${LIBDVDCSS_VERSION})
+set(_WIN32_IE "0x0600")
+
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cm ${CMAKE_CURRENT_BINARY_DIR}/config.h)
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/dvdcss/version.h.in ${CMAKE_CURRENT_BINARY_DIR}/version.h @ONLY)
+unset(size_t)
+
+add_library(${PROJECT_NAME}
+  src/dvdcss/dvdcss.h
+  src/common.h
+  src/css.c
+  src/css.h
+  src/csstables.h
+  src/device.c
+  src/device.h
+  src/error.c
+  src/ioctl.c
+  src/ioctl.h
+  src/libdvdcss.c
+  src/libdvdcss.h
+)
+add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})
+target_include_directories(${PROJECT_NAME}
+  PRIVATE
+  $<BUILD_INTERFACE:.;src;src/dvdcss;${CMAKE_CURRENT_BINARY_DIR}>
+  INTERFACE
+  $<INSTALL_INTERFACE:include>
+)
+if(MSVC)
+  target_compile_definitions(${PROJECT_NAME}
+    PRIVATE 
+      LIBDVDCSS_EXPORTS 
+      _CRT_SECURE_NO_WARNINGS
+      PATH_MAX=1024
+  )
+  if(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
+    enable_language(CXX)
+    target_sources(${PROJECT_NAME} PRIVATE
+      ${CMAKE_CURRENT_SOURCE_DIR}/msvc/uwpapi.cpp
+    )
+    set_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/msvc/uwpapi.cpp PROPERTIES COMPILE_FLAGS "/TP /ZW")
+  endif()
+endif()
+
+include(CMakePackageConfigHelpers)
+write_basic_package_version_file(
+  ${CMAKE_CURRENT_BINARY_DIR}/dvdcss-config-version.cmake
+  VERSION ${LIBDVDCSS_VERSION}
+  COMPATIBILITY AnyNewerVersion
+)
+
+install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}
+  RUNTIME DESTINATION bin
+  ARCHIVE DESTINATION lib
+  LIBRARY DESTINATION lib)
+
+
+install(FILES
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/dvdcss/dvdcss.h
+  ${CMAKE_CURRENT_BINARY_DIR}/version.h
+  DESTINATION include/dvdcss)
+
+install(EXPORT ${PROJECT_NAME}
+  FILE
+    dvdcss.cmake
+  NAMESPACE
+    dvdcss::
+  DESTINATION
+    lib/cmake/dvdcss
+)
+install(
+  FILES
+    cmake/dvdcss-config.cmake
+    ${CMAKE_CURRENT_BINARY_DIR}/dvdcss-config-version.cmake
+  DESTINATION
+    lib/cmake/dvdcss
+)
+if(MSVC AND BUILD_SHARED_LIBS)
+  install(FILES 
+    $<TARGET_PDB_FILE:dvdcss>
+    DESTINATION lib
+  )
+endif()
+export(TARGETS dvdcss
+  FILE
+  ${CMAKE_CURRENT_BINARY_DIR}/dvdcss-config.cmake
+  NAMESPACE dvdcss::
+)
diff --git a/cmake/CheckFileOffsetBits.c b/cmake/CheckFileOffsetBits.c
new file mode 100644
index 0000000..d948fec
--- /dev/null
+++ b/cmake/CheckFileOffsetBits.c
@@ -0,0 +1,14 @@
+#include <sys/types.h>
+
+#define KB ((off_t)1024)
+#define MB ((off_t)1024 * KB)
+#define GB ((off_t)1024 * MB)
+#define TB ((off_t)1024 * GB)
+int t2[(((64 * GB -1) % 671088649) == 268434537)
+       && (((TB - (64 * GB -1) + 255) % 1792151290) == 305159546)? 1: -1];
+
+int main()
+{
+  ;
+  return 0;
+}
diff --git a/cmake/CheckFileOffsetBits.cmake b/cmake/CheckFileOffsetBits.cmake
new file mode 100644
index 0000000..b347c93
--- /dev/null
+++ b/cmake/CheckFileOffsetBits.cmake
@@ -0,0 +1,44 @@
+# - Check if _FILE_OFFSET_BITS macro needed for large files
+# CHECK_FILE_OFFSET_BITS ()
+#
+# The following variables may be set before calling this macro to
+# modify the way the check is run:
+#
+#  CMAKE_REQUIRED_FLAGS = string of compile command line flags
+#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)
+#  CMAKE_REQUIRED_INCLUDES = list of include directories
+# Copyright (c) 2009, Michihiro NAKAJIMA
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+#INCLUDE(CheckCXXSourceCompiles)
+
+GET_FILENAME_COMPONENT(_selfdir_CheckFileOffsetBits
+	 "${CMAKE_CURRENT_LIST_FILE}" PATH)
+
+MACRO (CHECK_FILE_OFFSET_BITS)
+  IF(NOT DEFINED _FILE_OFFSET_BITS)
+    MESSAGE(STATUS "Checking _FILE_OFFSET_BITS for large files")
+    TRY_COMPILE(__WITHOUT_FILE_OFFSET_BITS_64
+      ${CMAKE_CURRENT_BINARY_DIR}
+      ${_selfdir_CheckFileOffsetBits}/CheckFileOffsetBits.c
+      COMPILE_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS})
+    IF(NOT __WITHOUT_FILE_OFFSET_BITS_64)
+      TRY_COMPILE(__WITH_FILE_OFFSET_BITS_64
+        ${CMAKE_CURRENT_BINARY_DIR}
+        ${_selfdir_CheckFileOffsetBits}/CheckFileOffsetBits.c
+        COMPILE_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS} -D_FILE_OFFSET_BITS=64)
+    ENDIF(NOT __WITHOUT_FILE_OFFSET_BITS_64)
+
+    IF(NOT __WITHOUT_FILE_OFFSET_BITS_64 AND __WITH_FILE_OFFSET_BITS_64)
+      SET(_FILE_OFFSET_BITS 64 CACHE INTERNAL "_FILE_OFFSET_BITS macro needed for large files")
+      MESSAGE(STATUS "Checking _FILE_OFFSET_BITS for large files - needed")
+    ELSE(NOT __WITHOUT_FILE_OFFSET_BITS_64 AND __WITH_FILE_OFFSET_BITS_64)
+      SET(_FILE_OFFSET_BITS "" CACHE INTERNAL "_FILE_OFFSET_BITS macro needed for large files")
+      MESSAGE(STATUS "Checking _FILE_OFFSET_BITS for large files - not needed")
+    ENDIF(NOT __WITHOUT_FILE_OFFSET_BITS_64 AND __WITH_FILE_OFFSET_BITS_64)
+  ENDIF(NOT DEFINED _FILE_OFFSET_BITS)
+
+ENDMACRO (CHECK_FILE_OFFSET_BITS)
+
diff --git a/cmake/dvdcss-config.cmake b/cmake/dvdcss-config.cmake
new file mode 100644
index 0000000..d1fde6e
--- /dev/null
+++ b/cmake/dvdcss-config.cmake
@@ -0,0 +1 @@
+include(${CMAKE_CURRENT_LIST_DIR}/dvdcss.cmake)
diff --git a/config.h.cm b/config.h.cm
new file mode 100644
index 0000000..de1409b
--- /dev/null
+++ b/config.h.cm
@@ -0,0 +1,169 @@
+/* config.h.in.  Generated from configure.ac by autoheader.  */
+
+/* Have IOKit DVD IOCTL headers */
+#cmakedefine DARWIN_DVD_IOCTL 1
+
+/* Define if <linux/cdrom.h> defines DVD_STRUCT. */
+#cmakedefine DVD_STRUCT_IN_LINUX_CDROM_H 1
+
+/* Define if <sys/cdio.h> defines dvd_struct. */
+#cmakedefine DVD_STRUCT_IN_SYS_CDIO_H 1
+
+/* Define if <sys/dvdio.h> defines dvd_struct. */
+#cmakedefine DVD_STRUCT_IN_SYS_DVDIO_H 1
+
+/* Define if you have a broken mkdir */
+#cmakedefine HAVE_BROKEN_MKDIR 1
+
+/* Define if FreeBSD-like dvd_struct is defined. */
+#cmakedefine HAVE_BSD_DVD_STRUCT 1
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#cmakedefine HAVE_DLFCN_H 1
+
+/* Define to 1 if you have the <dvd.h> header file. */
+#cmakedefine HAVE_DVD_H 1
+
+/* Define to 1 if you have the <errno.h> header file. */
+#cmakedefine HAVE_ERRNO_H 1
+
+/* Define to 1 if you have the <fcntl.h> header file. */
+#cmakedefine HAVE_FCNTL_H 1
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#cmakedefine HAVE_INTTYPES_H 1
+
+/* Define to 1 if you have the <io.h> header file. */
+#cmakedefine HAVE_IO_H 1
+
+/* Define to 1 if you have the <linux/cdrom.h> header file. */
+#cmakedefine HAVE_LINUX_CDROM_H 1
+
+/* Define if Linux-like dvd_struct is defined. */
+#cmakedefine HAVE_LINUX_DVD_STRUCT 1
+
+/* Define to 1 if you have the <memory.h> header file. */
+#cmakedefine HAVE_MEMORY_H 1
+
+/* Define if OpenBSD-like dvd_struct is defined. */
+#cmakedefine HAVE_OPENBSD_DVD_STRUCT 1
+
+/* Define to 1 if you have the <pwd.h> header file. */
+#cmakedefine HAVE_PWD_H 1
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#cmakedefine HAVE_STDINT_H 1
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#cmakedefine HAVE_STDLIB_H 1
+
+/* Define to 1 if you have the <strings.h> header file. */
+#cmakedefine HAVE_STRINGS_H 1
+
+/* Define to 1 if you have the <string.h> header file. */
+#cmakedefine HAVE_STRING_H 1
+
+/* Define to 1 if you have the <sys/cdio.h> header file. */
+#cmakedefine HAVE_SYS_CDIO_H 1
+
+/* Define to 1 if you have the <sys/dvdio.h> header file. */
+#cmakedefine HAVE_SYS_DVDIO_H 1
+
+/* Define to 1 if you have the <sys/ioctl.h> header file. */
+#cmakedefine HAVE_SYS_IOCTL_H 1
+
+/* Define to 1 if you have the <sys/param.h> header file. */
+#cmakedefine HAVE_SYS_PARAM_H 1
+
+/* Define to 1 if you have the <sys/scsi/impl/uscsi.h> header file. */
+#cmakedefine HAVE_SYS_SCSI_IMPL_USCSI_H 1
+
+/* Define to 1 if you have the <sys/scsi/scsi_types.h> header file. */
+#cmakedefine HAVE_SYS_SCSI_SCSI_TYPES_H 1
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#cmakedefine HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#cmakedefine HAVE_SYS_TYPES_H 1
+
+/* Define to 1 if you have the <sys/uio.h> header file. */
+#cmakedefine HAVE_SYS_UIO_H 1
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#cmakedefine HAVE_UNISTD_H 1
+
+/* Define to 1 if you have the <windows.h> header file. */
+#cmakedefine HAVE_WINDOWS_H 1
+
+/* Define to 1 if you have the <winioctl.h> header file. */
+#cmakedefine HAVE_WINIOCTL_H 1
+
+/* Define to the sub-directory where libtool stores uninstalled libraries. */
+#cmakedefine LT_OBJDIR "${LT_OBJDIR}"
+
+/* Define O_BINARY if missing */
+#cmakedefine O_BINARY "${O_BINARY}"
+
+/* Name of package */
+#cmakedefine PACKAGE "${PACKAGE}"
+
+/* Define to the address where bug reports for this package should be sent. */
+#cmakedefine PACKAGE_BUGREPORT "${PACKAGE_BUGREPORT}"
+
+/* Define to the full name of this package. */
+#cmakedefine PACKAGE_NAME "${PACKAGE_NAME}"
+
+/* Define to the full name and version of this package. */
+#cmakedefine PACKAGE_STRING "${PACKAGE_STRING}"
+
+/* Define to the one symbol short name of this package. */
+#cmakedefine PACKAGE_TARNAME "${PACKAGE_TARNAME}"
+
+/* Define to the home page for this package. */
+#cmakedefine PACKAGE_URL "${PACKAGE_URL}"
+
+/* Define to the version of this package. */
+#cmakedefine PACKAGE_VERSION "${PACKAGE_VERSION}"
+
+/* Have userspace SCSI headers. */
+#cmakedefine SOLARIS_USCSI 1
+
+/* Define to 1 if you have the ANSI C header files. */
+#cmakedefine STDC_HEADERS 1
+
+/* Define this if the compiler supports __attribute__((visibility("default")))
+   */
+#cmakedefine SUPPORT_ATTRIBUTE_VISIBILITY_DEFAULT 1
+
+/* Define this if the compiler supports the -fvisibility flag */
+#cmakedefine SUPPORT_FLAG_VISIBILITY 1
+
+/* Version number of package */
+#cmakedefine VERSION "${VERSION}"
+
+/* Enable large inode numbers on Mac OS X 10.5.  */
+#ifndef _DARWIN_USE_64_BIT_INODE
+# define _DARWIN_USE_64_BIT_INODE 1
+#endif
+
+/* Number of bits in a file offset, on hosts where this is settable. */
+#cmakedefine _FILE_OFFSET_BITS ${_FILE_OFFSET_BITS}
+
+/* Define for large files, on AIX-style hosts. */
+#cmakedefine _LARGE_FILES 1
+
+/* Define to '0x0501' for IE 5.01 (and shell) APIs. */
+#cmakedefine _WIN32_IE ${_WIN32_IE}
+
+/* Define to empty if `const' does not conform to ANSI C. */
+/* #undef const */
+
+/* Define to `__inline__' or `__inline' if that's what the C compiler
+   calls it, or to nothing if 'inline' is not supported under any name.  */
+#ifndef __cplusplus
+#cmakedefine inline
+#endif
+
+/* Define to `unsigned int' if <sys/types.h> does not define. */
+#cmakedefine size_t ${size_t}
-- 
2.10.2.windows.1

