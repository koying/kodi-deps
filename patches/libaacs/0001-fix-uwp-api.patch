diff --git a/CMakeLists.txt b/CMakeLists.txt
index 487645a..a14bc7a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -4,7 +4,7 @@ set(AACS_VERSION_MAJOR 0)
 set(AACS_VERSION_MINOR 9)
 set(AACS_VERSION_MICRO 0)
 
-project(libaacs VERSION ${AACS_VERSION_MAJOR}.${AACS_VERSION_MINOR}.${AACS_VERSION_MICRO} LANGUAGES C)
+project(libaacs VERSION ${AACS_VERSION_MAJOR}.${AACS_VERSION_MINOR}.${AACS_VERSION_MICRO} LANGUAGES C CXX)
 
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/libaacs/aacs-version.h.in
                ${CMAKE_CURRENT_SOURCE_DIR}/src/libaacs/aacs-version.h)
@@ -14,6 +14,11 @@ find_package(libgcrypt 1.7 REQUIRED NO_MODULE)
 
 if(MSVC)
   #set(CMAKE_DEBUG_POSTFIX "d")
+  if(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
+    add_definitions(-D_WIN32_WINNT=0x0A00 -D_WINSOCK_DEPRECATED_NO_WARNINGS)
+  else()
+    add_definitions(-D_WIN32_WINNT=0x0600 -D_WIN32_IE=0x0600)
+  endif()
 endif()
 
 find_program(BISON NAMES bison win_bison)
@@ -98,6 +103,17 @@ add_custom_command(
 
 target_link_libraries(libaacs PRIVATE libpgp-error::libpgp-error libgcrypt::libgcrypt)
 
+if(MSVC AND CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
+  target_sources(libaacs PRIVATE
+    src/file/dirs_uwp.cpp
+  )
+  set_source_files_properties(src/file/dirs_uwp.cpp PROPERTIES COMPILE_FLAGS "/TP /ZW")
+  # fix libs order
+  set_target_properties(libaacs PROPERTIES LINK_FLAGS_RELWITHDEBINFO "/defaultlib:vccorlib.lib /defaultlib:msvcrt.lib")
+  set_target_properties(libaacs PROPERTIES LINK_FLAGS_RELEASE "/defaultlib:vccorlib.lib /defaultlib:msvcrt.lib")
+  set_target_properties(libaacs PROPERTIES LINK_FLAGS_DEBUG "/defaultlib:vccorlibd.lib /defaultlib:msvcrtd.lib")
+endif()
+
 set(EX_SRCS
   ${CMAKE_CURRENT_SOURCE_DIR}/src/examples/aacs_info.c
 )
diff --git a/cmake/config.h b/cmake/config.h
index 0c3a6b4..ba50f9d 100644
--- a/cmake/config.h
+++ b/cmake/config.h
@@ -114,14 +114,14 @@
 
 #ifdef _M_IX86
 /* Define to '0x0501' for IE 5.01. */
-#define _WIN32_IE 0x0502
+//#define _WIN32_IE 0x0502
 
 /* Define to '0x0500' for Windows XP APIs. */
-#define _WIN32_WINNT 0x0502
+//#define _WIN32_WINNT 0x0502
 #else
 /* Define to '0x0600' for IE 6.0. */
-#define _WIN32_IE 0x0600
+//#define _WIN32_IE 0x0600
 
 /* Define to '0x0600' for Windows Vista APIs. */
-#define _WIN32_WINNT 0x0600
+//#define _WIN32_WINNT 0x0600
 #endif
diff --git a/src/file/dirs_uwp.cpp b/src/file/dirs_uwp.cpp
new file mode 100644
index 0000000..008cfc8
--- /dev/null
+++ b/src/file/dirs_uwp.cpp
@@ -0,0 +1,28 @@
+
+#include <windows.h>
+#include <malloc.h>
+
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)
+
+extern "C" {
+  char *file_get_data_home(void)
+  {
+    auto localFolder = Windows::Storage::ApplicationData::Current->LocalFolder;
+    int len = WideCharToMultiByte(CP_UTF8, 0, localFolder->Path->Data(), -1, NULL, 0, NULL, NULL);
+    char *appdir = (char *)malloc(len);
+    if (appdir) {
+      WideCharToMultiByte(CP_UTF8, 0, localFolder->Path->Data(), -1, appdir, len, NULL, NULL);
+    }
+    return appdir;
+  }
+
+  const char *file_get_config_system(const char *dir)
+  {
+    if (!dir) // first call
+      return file_get_data_home();
+
+    return NULL; // next call
+  }
+}
+
+#endif
\ No newline at end of file
diff --git a/src/file/dirs_win32.c b/src/file/dirs_win32.c
index 9f77a2e..ccf5486 100644
--- a/src/file/dirs_win32.c
+++ b/src/file/dirs_win32.c
@@ -38,6 +38,7 @@ char *file_get_config_home(void)
     return file_get_data_home();
 }
 
+#if !defined(WINAPI_FAMILY) || (WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP)
 char *file_get_data_home(void)
 {
     wchar_t wdir[MAX_PATH];
@@ -56,12 +57,14 @@ char *file_get_data_home(void)
     BD_DEBUG(DBG_FILE, "Can't find user configuration directory !\n");
     return NULL;
 }
+#endif
 
 char *file_get_cache_home(void)
 {
     return file_get_data_home();
 }
 
+#if !defined(WINAPI_FAMILY) || (WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP)
 const char *file_get_config_system(const char *dir)
 {
     static char *appdir = NULL;
@@ -93,3 +96,4 @@ const char *file_get_config_system(const char *dir)
 
     return dir;
 }
+#endif
\ No newline at end of file
diff --git a/src/file/mmc_device_win32.c b/src/file/mmc_device_win32.c
index f78dd1c..8b717ec 100644
--- a/src/file/mmc_device_win32.c
+++ b/src/file/mmc_device_win32.c
@@ -72,6 +72,7 @@ struct mmcdev {
 
 int device_send_cmd(MMCDEV *dev, const uint8_t *cmd, uint8_t *buf, size_t tx, size_t rx)
 {
+#if !defined(WINAPI_FAMILY) || (WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP)
     DWORD dwBytesReturned;
 
     struct {
@@ -123,7 +124,7 @@ int device_send_cmd(MMCDEV *dev, const uint8_t *cmd, uint8_t *buf, size_t tx, si
             return 1;
         }
     }
-
+#endif
     BD_DEBUG(DBG_MMC, "  Send failed!\n");
 
     return 0;
@@ -137,6 +138,11 @@ MMCDEV *device_open(const char *path)
     HANDLE  fd;
     MMCDEV *dev;
 
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)
+    BD_DEBUG(DBG_MMC, "Opening Windows MMC drive is not implemented\n");
+    dev = NULL;
+#else
+
     BD_DEBUG(DBG_MMC, "Opening Windows MMC drive %s...\n", drive);
 
     type = GetDriveType(drive);
@@ -168,6 +174,7 @@ MMCDEV *device_open(const char *path)
     }
 
     dev->fd = fd;
+#endif
     return dev;
 }
 
diff --git a/src/libaacs/aacs.c b/src/libaacs/aacs.c
index 82a1a32..3ad74f4 100644
--- a/src/libaacs/aacs.c
+++ b/src/libaacs/aacs.c
@@ -47,6 +47,9 @@
 #endif
 #include <gcrypt.h>
 
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)
+# define getenv(x) NULL
+#endif
 
 #define SECTOR_LEN       2048  /* bus encryption block size */
 #define ALIGNED_UNIT_LEN 6144  /* aacs block size */
diff --git a/src/util/logging.c b/src/util/logging.c
index 23c3061..c2057db 100644
--- a/src/util/logging.c
+++ b/src/util/logging.c
@@ -31,6 +31,10 @@
 #include <stdarg.h>
 #include <string.h>
 
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)
+# define getenv(x) NULL
+#endif
+
 uint32_t debug_mask = (uint32_t)-1; /* set all bits to make sure bd_debug() is called for initialization */
 
 void bd_debug(const char *file, int line, uint32_t mask, const char *format, ...)
-- 
2.13.2.windows.1

